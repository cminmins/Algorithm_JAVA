import java.util.List;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.Queue;

class Solution {
    
    class position
    {
        int x;
        int y;
        
        public position(int a, int b)
        {
            this.x = a;
            this.y = b;
        }
        public int first()
        {
            return x;
        }
        public int second()
        {
            return y;
        }
    }
    
    public int[] solution(int m, int n, int[][] picture) {
        
        // 기본 좌표 세팅
        List<position> pos = new LinkedList<>();
        position p = new position(0, 1);        pos.add(p);
        p = new position(1, 0);         pos.add(p);
        p = new position(0, -1);        pos.add(p);
        p = new position(-1, 0);        pos.add(p);
        
        // 탐색했는지와 구역을 구분할 배열
        int[][] map = new int[m][n];
        
        //탐색할 좌표들이 들어갈 큐
        Queue<position> q = new LinkedList<position>();
    
        int numberOfArea = 0;
        int maxSizeOfOneArea = 0;
        int[] answer = new int[2];
        
        int temp = 0;
        for(int y = 0; y < m; y++){
            for(int x= 0; x<n; x++){
                temp = 0;
                if((y >= 0 && y< m) && (x>=0 && x < n)
                   && map[y][x] == 0 && picture[y][x] > 0){
                    System.out.println("Start y : " + y + " x : " + x);
                    // 방문하지 않았고, 색이 칠해져있을때
                    numberOfArea++;
                    map[y][x] = numberOfArea;
                    q.offer(new position(x,y));
                    temp++;
                    // 해당 y,x로 부터 bfs 탐색
                    while(!q.isEmpty()){
                        int b = q.peek().second();
                        int a = q.peek().first();
                        q.poll();
                        // b,a 좌표로 부터 4방향 탐색
                        for(int k=0; k<4; k++){
                            int nb = b + pos.get(k).second();
                            int na = a + pos.get(k).first();
                            if((nb >= 0 && nb < m) && (na >= 0 && na < n)
                               && map[nb][na] == 0 
                               && picture[nb][na] == picture[b][a]){
                                // System.out.println("Queue nb : " + nb + " na : " + na + " // b : " + b + " a : " + a);
                                map[nb][na] = numberOfArea;
                                q.offer(new position(na,nb));
                                temp++;
                            }
                        }
                    }
                    if(maxSizeOfOneArea < temp){
                        // System.out.println("change Area : " + numberOfArea + ", max : " + maxSizeOfOneArea);
                        maxSizeOfOneArea = temp;
                        temp = 0;
                    }
                }
            }
        }
//         for(int[] t : map)
//             System.out.println(Arrays.toString(t));
        
//         System.out.println("Area : " + numberOfArea);
//         System.out.println("maxSizeOfOneArea : " + maxSizeOfOneArea);
        
        answer[0] = numberOfArea;
        answer[1] = maxSizeOfOneArea;
        return answer;
    }       
}