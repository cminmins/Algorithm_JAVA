// String은 선언되면 변경이 되지않는 변수
// 새로 문자를 추가하기 위해선 새로운 객체가 선언되는 것 "a" + "b" -> "ab"(전혀 다른 주소값)
// 따라서 이럴때는 Stringbuilder()를 이용
//  append(), deleteAt(), delete(시작,끝-1), insert(), reverse() 등등 함수가 있음
// Stringbuilder.charAt()을 하면 character가 return됨. ex) 3 -> 51;
// int to = Integer.parseInt(from);
// String to = Integer.toString(from);
// Math.pow
// String에 들어가는 숫자는 아스키 코드 '1' == 49
// toString vs valueOf() 의 차이점은 대상이 null이면 toString은 예외처리, valueOf는 null을 입력
// 안전한 코딩을 위해서 문자열 + 숫자를 출력할때는 숫자를 Integer.toString()을 쓰는게 안전함
// toString(int i, int radix)를 하면, i를 원하는 진법에 맞춰서 변환해줌 ex) (30, 16) -> 30을 16진수로 한 문자열 == 1e

class Solution {
    public int solution(int n) {
        int answer = 0;
        StringBuilder str = new StringBuilder();
        
        while(n > 0)
        {
            str.append(n % 3);
            n /= 3;
        }
        int z = 0;
        for(int i = str.length()-1; i>=0; i--)
        {
        
            System.out.println("before answer : " + answer);
            System.out.println("str : " + str.charAt(i));
            System.out.println("곱 : " + Math.pow(3, z));
            answer += (str.charAt(i) - 48) * Math.pow(3, z++);
            System.out.println("After answer : " + answer);
            System.out.println("--------------------------------");
            
        }
        
        
        return answer;
    }
}