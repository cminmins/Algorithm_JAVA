import java.util.Comparator;
import java.util.Collections;
import java.util.ArrayList;
import java.util.Stack;

class Solution {
    boolean[] use ;
    ArrayList<Stack<String>> answers = new ArrayList<>();
    
    public void dfs(String[][] t, int cnt, Stack<String> s){
        if(cnt == t.length){
            Stack<String> st = new Stack<>();
            for(int i=0;i<t.length+1;i++)
                st.push(s.get(i));
            answers.add(st);
            return;
        }
        String find = s.peek();
        for(int i=0; i<t.length; i++){
            if(!use[i] && t[i][0].equals(find)){
                use[i] = true;
                s.push(t[i][1]);
                
                dfs(t, cnt+1, s);
                
                s.pop();
                use[i] = false;
            }
        }
        return;
    } 
    
    
    
    public String[] solution(String[][] tickets) {
        int tic_len = tickets.length;
        String[] answer = new String[tic_len+1];
        use = new boolean[tic_len];
        Stack<String> temp = new Stack<>();
        temp.push("ICN");
        dfs(tickets, 0, temp);
        
        Collections.sort(answers, new Comparator<Stack<String>>(){
            @Override
            public int compare(Stack<String> s1, Stack<String> s2){
                for(int i=0; i<s1.size(); i++){
                    if(!s1.get(i).equals(s2.get(i)))
                        return s1.get(i).compareTo(s2.get(i));
                }
                return 0;
            }
        });
        for(int i=0; i<tic_len+1; i++)
            answer[i] = answers.get(0).get(i);
        
        return answer;
    }
}